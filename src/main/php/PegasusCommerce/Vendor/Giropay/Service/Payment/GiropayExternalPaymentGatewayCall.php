<?php
use PegasusCommerce\Common\Payment\PaymentGatewayType;
use PegasusCommerce\Common\Payment\Service\AbstractExternalPaymentGatewayCall;

class GiropayExternalPaymentGatewayCall extends AbstractExternalPaymentGatewayCall {

    /**
     * @param $paymentRequest
     * @return mixed
     * @throws Exception
     */
    public function communicateWithVendor($paymentRequest)
    {
        require_once( __DIR__ . '/SDK/GiroCheckout_SDK.php' );

        $request = new GiroCheckout_SDK_Request('giropayTransaction');
        $request->setSecret($projectPassword);
        $request->addParam('merchantId',$merchantID)
            ->addParam('projectId',$projectID)
            ->addParam('merchantTxId',"1234567890")
            ->addParam('amount',100)
            ->addParam('currency','EUR')
            ->addParam('purpose','Beispieltransaktion')
            ->addParam('bic','TESTDETT421')
            ->addParam('info1Label','Ihre Kundennummer')
            ->addParam('info1Text','0815')
            ->addParam('urlRedirect','http://mydomain.de/examples/redirect.php')
            ->addParam('urlNotify','http://mydomain.de/examples/notify_log.php')
            //the hash field is auto generated by the SDK
            ->submit();


        /* if transaction succeeded update your local system an redirect the customer */
        if($request->requestHasSucceeded())
        {
            $request->getResponseParam('rc');
            $request->getResponseParam('msg');
            $request->getResponseParam('reference');
            $request->getResponseParam('redirect');

            $request->redirectCustomerToPaymentProvider();
        }

        /* if the transaction did not succeed update your local system, get the responsecode and notify the customer */
        else {
            $request->getResponseParam('rc');
            $request->getResponseParam('msg');
            $request->getResponseMessage($request->getResponseParam('rc'),'DE');
        }
    }

    /**
     * @return int
     */
    public function getFailureReportingThreshold()
    {
        return 1;
    }
}